test_it_aic.doctest - tests for the stdnum.it.aic module

>>> from stdnum.it import aic
>>> from stdnum.exceptions import *


Some valid codes

>>> aic10_valid = ['000307052', '000307037', '001738032', '001738020', '042645046', '045359015', ]
>>> aic32_valid = ['009CVD', '009CUX', '01P19J', '01P194', '18PFKQ', '1C87X7', ]

for i, c in enumerate(aic10):
...     if aic.to_base32(c) != aic32[i]:
...        raise Exception()
... 

for i, c in enumerate(aic32):
...     if aic.from_base32(c) != aic10[i]:
...        raise Exception()
... 

>>> aic.to_base32('000307037')
'009CUX'

Some wrong

>>> aic.from_base32('009CV$') == None
Traceback (most recent call last):
    ...
InvalidFormat: ...

>>> aic.check_base10_checksum('00030705')
False
>>> aic.check_base10_checksum('010307052')
False

>>> aic.is_base10('00307052')
Traceback (most recent call last):
    ...
InvalidLength: ...
>>> aic.is_base10('000307053')
Traceback (most recent call last):
    ...
InvalidChecksum: ...
>>> aic.is_base10('0003070.3')
Traceback (most recent call last):
    ...
InvalidFormat: ...
>>> aic.is_base10('100307052')
Traceback (most recent call last):
    ...
InvalidFormat: ...

>>> aic.is_base32('009CVD1')
Traceback (most recent call last):
    ...
InvalidLength: ...
>>> aic.is_base32('009CVL')
Traceback (most recent call last):
    ...
InvalidChecksum: ...
>>> aic.is_base32('00$CVD')
Traceback (most recent call last):
    ...
InvalidFormat: ...
>>> aic.is_base32('100307052')
Traceback (most recent call last):
    ...
InvalidLength: ...

>>> aic.is_valid('000307052')
True
>>> aic.is_valid('00030705.')
False
>>> aic.is_valid('009CVD')
True
>>> aic.is_valid('09CVD')
False

>>> aic.validate('009CVD')
'000307052'
>>> aic.validate('000307037')
'000307037'
>>> aic.validate('00307052')
Traceback (most recent call last):
    ...
InvalidLength: ...
